Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Github configuration"
        Parameters:
          - GitHubRepo
          - GitHubBranch
          - GitHubToken
          - GitHubUser

Parameters:
  GitHubRepo:
    Type: String
    Description: Github repo name (e.g. github.com/Org/RepoName then RepoName)
    Default: nginx
  GitHubBranch:
    Type: String
    Default: master
    Description: The github branch to monitor for changes.
  GitHubToken:
    Type: String
    Description: The Github Token which has access to the repository.
  GitHubUser:
    Type: String
    Description: The Github User/Organisation under which the repository is hosted.
    Default: john
  TagName:
    Type: String
    Description: Tag name for the cloudformation stack
    Default: john-nginx
  Region:
    Type: String
    Description: The region to which the app is to be deployed.
    Default: ap-southeast-1
  S3BucketName:
    Type: String
    Description: A bucket in the region which is planned for app deployment.

Resources:
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cfn-${TagName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:*
                  - iam:*
  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - '*'
                Effect: Allow
                Resource: '*'

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cb-${TagName}
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:*
                  - cloudformation:*
                  - '*'

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cp-${TagName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole
                  - lambda:*

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub lambda-${TagName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "lambda.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:*
                  - autoscaling:Describe*
                  - autoscaling:UpdateAutoScalingGroup
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStack*
                  - cloudformation:UpdateStack
                  - cloudwatch:GetMetricStatistics
                  - ec2:Describe*
                  - elasticloadbalancing:*
                  - ecs:*
                  - iam:*
                  - codepipeline:*
                  - logs:*

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Location: !Ref ArtifactBucket
        Type: "S3"
      Source:
        Location: !Sub ${ArtifactBucket}/source.zip
        Type: "GITHUB"
      Environment:
        ComputeType: "BUILD_GENERAL1_LARGE"
        Image: "aws/codebuild/nodejs:6.3.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: GITHUB_TOKEN
            Value: !Ref GitHubToken
          - Name: TAG_NAME
            Value: !Ref TagName
          - Name: ARTIFACT_BUCKET
            Value: !Ref S3BucketName
          - Name: STACK_NAME
            Value: !Join ["-", ["Ref":"AWS::StackName", "sam"]]
          - Name: REGION
            Value: !Ref Region
      ServiceRole: !Ref CodeBuildServiceRole
  
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 3
        # - Name: Execute
        #   Actions:
        #     - Name: Execute
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: 1
        #         Provider: CloudFormation
        #       InputArtifacts:
        #         - Name: BuildOutput
        #       Configuration:
        #           ActionMode: CHANGE_SET_REPLACE
        #           RoleArn: !GetAtt [CFNRole, Arn]
        #           StackName: !Join ["-", ["Ref":"AWS::StackName", "sam"]]
        #           Capabilities: CAPABILITY_IAM
        #           ChangeSetName: !Join ["-", ["Ref":"AWS::StackName", "sam"]]
        #           TemplatePath: BuildOutput::NewSamTemplate.yaml
        #       RunOrder: 4
        # - Name: Deploy
        #   Actions:
        #     - Name: Deploy
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: 1
        #         Provider: CloudFormation
        #       InputArtifacts:
        #         - Name: BuildOutput
        #       Configuration:
        #           ActionMode: CHANGE_SET_EXECUTE
        #           RoleArn: !GetAtt [CFNRole, Arn]
        #           StackName: !Join ["-", ["Ref":"AWS::StackName", "sam"]]
        #           ChangeSetName: !Join ["-", ["Ref":"AWS::StackName", "sam"]]
        #       RunOrder: 4
Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
